        NXP LS1028A-rdb Board Support Package

1. About this document
======================

This document describes common and non-hardware specific information.
Please refer to README.hardware for hardware specific information.

Dependencies
------------
This layer depends on the oe-core version supplied with Wind River
Linux and the wrlinux layer.

Maintenance
-----------
This layer is maintained by Wind River Systems, Inc.
Contact <support@windriver.com> or your support representative for more
information on submitting changes.

Building the nxp-ls1028 layer
---------------------------
This layer and wrlinux layer should be added to bblayers.conf. This
is done automatically when using the Wind River configure wrapper.

License
-------
Copyright (C) 2024 Wind River Systems, Inc.

Source code included in the tree for individual recipes is under the LICENSE
stated in the associated recipe (.bb file) unless otherwise stated.

The metadata is under the following license unless otherwise stated.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

2. BSP Kernel and Distros
=========================

The following table summarizes the valid Wind River Linux distros for this BSP.
'Y' in each content cell stands for supported; 'N' stands for not supported:

  +--------------+-------------+------------------+-------------------+--------------+
  | valid/distro |   wrlinux   | wrlinux-graphics | wrlinux-installer | wrlinux-tiny |
  +--------------+-------------+------------------+-------------------+--------------+
  |    valid     |      Y      |        Y         |         N         |       N      |
  +--------------+-------------+------------------+-------------------+--------------+

For the supported kernel type for this BSP, please check the TARGET_SUPPORTED_KTYPES
by running 'bitbake -e virtual/kernel | grep "^TARGET_SUPPORTED_KTYPES="'.


3. Board Specific Patches
=========================
To get a list of patches applied to the kernel specific to this BSP,
along with patch descriptions, use git to see what changed on the default
kernel. For example:

  # cd tmp-glibc/work-shared/<bsp_name>/kernel-source
  # git whatchanged <kernel_version>/base..<kernel_version>/standard/<bsp_branch>

4. Boot Instructions
====================

The typical u-boot settings apply to these boards. You will need to use
setenv, printenv and saveenv, to configure, display and store respectively
your network configuration details and kernel command line. In order to
TFTP a kernel, you need at a minimum to set the following:

        - ipaddr
        - gatewayip
        - netmask
        - serverip
        - loadaddr
        - dtbfile
        - dtbaddr
        - ethaddr
        - eth1addr

Your board may ship with the values for the MAC address of
the Ethernet interfaces set to the defaults compiled into the
u-boot image.  You should set the ethaddr, eth1addr and so on
as per the manufacturer assigned values, usually indicated with
a sticker on the board.

Target specifics are usually set in the "bootargs" variable, and the
kernel image is set in the "bootfile" variable. Don't forget that if you
want these values to be available after a power cycle you will need to run
the saveenv command.

Typically convenience macros exist that will create a complete bootargs
command line for the kernel based on variables that contain individual
settings.  Since these macros exist as env variables themselves, they
may or may not be present depending on who installed and configured
u-boot for the board.

The console device for the board is ttyS0 at 115200 baud. For the DTB
address, 0xa0000000 was used with success by Wind River. The load address
must be high enough to not interfere with kernel decompression. A value
of 0x80080000 was used with success for all kernels tested by Wind River.


4.1 NFS Root File System
------------------------

Example settings for the monitor (u-boot) are shown below:

nfsboot=setenv bootargs root=/dev/nfs rw nfsroot=$serverip:$rootpath \
ip=$ipaddr:$serverip:$gatewayip:$netmask:$hostname:$netdev:off default_hugepagesz=2m \
hugepagesz=2m hugepages=256 video=1920x1080-32@60 cma=256M \
console=$consoledev,$baudrate $othbootargs;sf probe && sf read $load_addr 0x900000 0x20000; \
hdp load $load_addr 0x2000;tftp $kernel_addr_r $kernelfile; \
tftp $fdt_addr_r $fdtfile;booti $kernel_addr_r - $fdt_addr_r
ethact=enetc#0
kernel_addr_r=0x80080000
fdt_addr_r=a0000000
gatewayip=128.224.165.1
netmask=255.255.255.0
ipaddr=128.224.165.114
serverip=128.224.165.20
netdev=eth0
kernelfile=Image
fdtfile=fsl-ls1028a-rdb.dtb
rootpath=/tftpboot/rootfs
consoledev=ttyS0
baudrate=115200
othbootargs=earlycon=uart8250,mmio,0x21c0500

Note:
  Currently, ls1028ardb board supports three boot modes, user can select
  one of them via setting corresponding DIP switch.

  Boot source	   SW2[1:8]	SW3[1:8]	SW5[1:8]
  FSPI NOR  	   1111_1000	1111_0000	0011_1001
  SD Card (SDHC1)  1000_1000	1111_0000	0011_1001
  eMMC		   1001_1000	1111_0000	0011_1001

5. Creating Partitioned Images(WIC)
===================================

User can use the OpenEmbedded Image Creator, wic, to create the properly
partitioned image on a SD card. The wic command
generates partitioned images from existing OpenEmbedded build artifacts.
User can refer to the below URL to get more WIC details:

https://docs.yoctoproject.org/dev-manual/common-tasks.html#creating-partitioned-images-using-wic

This BSP supports disk images for SD card.
After build the project, user will get a WIC image under the directory
tmp-glibc/deploy/images/<bsp name>/ ,such as:

tmp-glibc/deploy/images/nxp-ls1028/wrlinux-image-<rootfs_type>-nxp-ls1028.wic

Then user can write the output image to a SD card:

5.1 Burn images to SD card
--------------------------

5.1.1 Generate WIC image with NXP bootloader

WRLinux product provides a solution to build WIC image with NXP bootloader.
Please refer to section 7 for the detailed description.
After building, the WIC image(wrlinux-image-std-nxp-ls1028.wic) is generated
in directory <building-path>/build/tmp-glibc/deploy/images/nxp-ls1028.

5.1.2 Burn WIC image

# dd if=wrlinux-image-std-nxp-ls1028.wic of=/dev/your_sd_dev conv=fsync

5.2 Set board switch
--------------------

Board can boot from SD card by setting SW2~SW5 as below.
After power up, if a bootable SD card inserted, then system will boot from SD card.

Boot source 		SW2[1:8] 		SW3[1:8] 		SW5[1:8]
SD Card (SDHC1) 	1000_1000 		1111_0000 		0011_1001

5.3 Set uboot env
-----------------

Board can boot automatically by set the below uboot environment variables:

=> setenv bootfile Image; setenv fdtfile fsl-ls1028a-rdb.dtb; setenv loadaddr 0x81000000; setenv fdtaddr 0x90000000;

=> setenv bootargs console=ttyS0,115200n8 root=/dev/mmcblk0p2 rw

=> setenv bootcmd 'fatload mmc 0:1 $loadaddr $bootfile; fatload mmc 0:1 $fdtaddr $fdtfile; booti $loadaddr - $fdtaddr'

=> saveenv; run bootcmd;


6. Features
===========

6.1 Audio
---------

The integrated I2S module on LS1028ardb is NXP's Synchronous Audio
Interface(SAI). To enable SAI, the rcw binary should be changed from
default rcw to rcw_1300.rcw, and set EC1_SAI4_5_PMUX to 2. Besides,
run the following command at U-Boot prompt:
    i2c mw 0x66 0x53 0x4
to set BRDCFG3[2] = 1 and set the switch SW5[8] on. Then, the audio will
work normal. There is an audio output port J34 in the front panel of the
board, for testing, you can plug in your earphone to hear the sound by the
following command:

	Show all mixer simple controls
	# amixer -c 0 scontrols
		   ......
		   Simple mixer control 'Lineout',0
		   ......

	Enable audio output
	# amixer -c 0 sset Lineout on

	Set audio volume
	# amixer -c 0 sset Lineout 100%

	Play audio
	# aplay /usr/share/sounds/alsa/Front_Center.wav -Dhw:0,0

6.1.1 Install Audio tools

The audio tools has been moved to BSP_EXTRAS_PACKAGES.
Simply add line as follows to ${buildprj}/build/conf/local.conf:

 WRTEMPLATE ?= "feature/bsp-extras"

You also install alsa-utils separately with the following line:

IMAGE_INSTALL:append = " alsa-utils"

6.1.2 Build bootloader with audio feature

Since SAI need rcw_1300.rcw, this section describes how to build a
bootloader including the rcw_1300.rcw.

Detailed steps as below:

Refer to section 7, add necessary configurations in local.conf firstly.

Open file <project-path>/layers/nxp-ls1028/conf/machine/nxp-ls1028.conf, and then set RCW related
variable as below.
RCWSD ?= "R_SQPH_0x85be/rcw_1300"
RCWXSPI ?= "R_SQPH_0x85be/rcw_1300"
RCWEMMC ?= "R_SQPH_0x85be/rcw_1300"

Open file <project-path>/layers/meta-qoriq/recipes-bsp/secure-boot/secure-boot-qoriq/ls1028ardb.manifest,
and then set rcw related variable as below.
rcw_xspi=rcw/ls1028ardb/R_SQPH_0x85be/rcw_1300.bin
rcw_sd=rcw/ls1028ardb/R_SQPH_0x85be/rcw_1300.bin
rcw_emmc=rcw/ls1028ardb/R_SQPH_0x85be/rcw_1300.bin

# . environment-setup-x86_64-wrlinuxsdk-linux
# . oe-init-build-env
# bitbake rcw

Open file <project-path>/build/tmp-glibc/work/nxp_ls1028-wrs-linux/rcw/git-r0/git/ls1028ardb/R_SQPH_0x85be/rcw_1300.rcw,
and then set EC1_SAI4_5_PMUX=2.

Rebuild rcw forcely
# bitbake rcw -c compile -f -v

Build bootloader image
# bitbake secure-boot-qoriq

After building, the bootloader image(firmware_ls1028ardb_uboot_<boot-type>.img) of supporting audio
feature is generated in directory <project-path>/build/tmp-glibc/deploy/images/nxp-ls1028.

6.1.3 Burn Bootloader

Burn bootloader image with below command.

# dd if=firmware_ls1028ardb_uboot_sdboot.img of=/dev/your_sd_dev bs=512 seek=8 conv=fsync

6.2 CPU frequency
------------------

CPU frequency scaling allows the clock speed of the CPU to be
changed on the fly.

    # echo userspace > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor

Note: 
    Make sure your expected scaling governors are available from your
    kernel configs

6.3 PTP by ptp4l
----------------

1) To configure one machine as master:

    root@nxp-ls1028:~# ptp4l -i eth0 -p /dev/ptp0 -m
    ptp4l[175.037]: selected /dev/ptp0 as PTP clock
    ptp4l[175.038]: driver changed our HWTSTAMP options
    ptp4l[175.038]: tx_type   1 not 1
    ptp4l[175.038]: rx_filter 1 not 12
    ptp4l[175.038]: port 1: INITIALIZING to LISTENING on INITIALIZE
    ptp4l[175.038]: port 0: INITIALIZING to LISTENING on INITIALIZE
    ptp4l[175.038]: port 1: link up
    ptp4l[182.126]: port 1: LISTENING to MASTER on ANNOUNCE_RECEIPT_TIMEOUT_EXPIRES
    ptp4l[182.126]: selected best master clock 720ff8.fffe.2e3c31
    ptp4l[182.126]: assuming the grand master role

2) Another as slave:

    root@nxp-ls1028:~# ptp4l -i eth0 -p /dev/ptp0 -m
    ptp4l[233.257]: selected /dev/ptp0 as PTP clock
    ptp4l[233.258]: driver changed our HWTSTAMP options
    ptp4l[233.258]: tx_type   1 not 1
    ptp4l[233.258]: rx_filter 1 not 12
    ptp4l[233.258]: port 1: INITIALIZING to LISTENING on INITIALIZE
    ptp4l[233.258]: port 0: INITIALIZING to LISTENING on INITIALIZE
    ptp4l[233.258]: port 1: link up
    ptp4l[233.816]: port 1: new foreign master 22fa84.fffe.480bac-1
    ptp4l[237.816]: selected best master clock 22fa84.fffe.480bac
    ptp4l[237.816]: port 1: LISTENING to UNCALIBRATED on RS_SLAVE
    ptp4l[239.815]: master offset -5567669943 s0 freq      +0 path delay     18980
    ptp4l[240.815]: master offset -5567678538 s1 freq   -8595 path delay     20350
    ptp4l[241.815]: master offset     -11555 s2 freq  -20150 path delay     20350
    ptp4l[241.815]: port 1: UNCALIBRATED to SLAVE on MASTER_CLOCK_SELECTED
    ptp4l[242.815]: master offset      23910 s2 freq  +11849 path delay     20350
    ptp4l[243.815]: master offset       9475 s2 freq   +4587 path delay     20350
    ptp4l[244.815]: master offset       7625 s2 freq   +5579 path delay     20350
    ptp4l[245.815]: master offset     -23970 s2 freq  -23728 path delay     21720
    ptp4l[246.815]: master offset      15980 s2 freq   +9031 path delay     20350
    ptp4l[247.815]: master offset       6085 s2 freq   +3930 path delay     20715
    ptp4l[248.816]: master offset      -1185 s2 freq   -1515 path delay     20715
    ptp4l[249.816]: master offset       5018 s2 freq   +4333 path delay     18982
    ptp4l[250.816]: master offset      -8420 s2 freq   -7600 path delay     20715
    ptp4l[251.816]: master offset     -20343 s2 freq  -22049 path delay     19848
    ptp4l[252.816]: master offset      22082 s2 freq  +14273 path delay     19848
    ptp4l[253.816]: master offset     -18512 s2 freq  -19696 path delay     21217

6.4 PCIe SR-IOV
--------------

  # ifconfig -a|grep eth[0-9]|wc -l
    3

  # ifconfig -a|grep swp|wc -l
    4

# cd /sys/bus/pci/devices/0000:00:00.0
  # echo 1 > sriov_numvfs
    pci 0000:00:01.0: [1957:ef00] type 00 class 0x020001
    fsl_enetc_vf 0000:00:01.0: Adding to iommu group 9
    fsl_enetc_vf 0000:00:01.0: enabling device (0000 -> 0002)

  # ifconfig -a|grep eth[0-9]|wc -l
    4
  # ethtool -i eth0
    driver: fsl_enetc
    version:
    firmware-version:
    expansion-rom-version:
    bus-info: 0000:00:00.0
    supports-statistics: yes
    supports-test: no
    supports-eeprom-access: no
    supports-register-dump: yes
    supports-priv-flags: no

  # ethtool -i eth3
    driver: fsl_enetc_vf
    version:
    firmware-version:
    expansion-rom-version:
    bus-info: 0000:00:01.0
    supports-statistics: yes
    supports-test: no
    supports-eeprom-access: no
    supports-register-dump: yes
    supports-priv-flags: no


6.5 ina220 & sa56004
--------------------

  #cat /sys/devices/platform/soc/2000000.i2c/i2c-0/i2c-3/3-0040/hwmon/hwmon3/name
   ina220
  #ls -l /sys/devices/platform/soc/2000000.i2c/i2c-0/i2c-3/3-0040/hwmon/hwmon3
   total 0
   curr1_input
   device -> ../../../3-0040
   in0_input
   in1_input
   name
   of_node -> ../../../../../../../../../firmware/devicetree/base/soc/i2c@2000000/i2c-mux@77/i2c@2/current-monitor@40
   power
   power1_input
   shunt_resistor
   subsystem -> ../../../../../../../../../class/hwmon
   uevent

  #cat /sys/devices/platform/soc/2000000.i2c/i2c-0/i2c-4/4-004c/hwmon/hwmon2/name
   sa56004
  #ls -l /sys/devices/platform/soc/2000000.i2c/i2c-0/i2c-4/4-004c/hwmon/hwmon2
   total 0
   alarms
   device -> ../../../4-004c
   name
   of_node -> ../../../../../../../../../firmware/devicetree/base/soc/i2c@2000000/i2c-mux@77/i2c@3/temperature-sensor@4c
   power
   subsystem -> ../../../../../../../../../class/hwmon
   temp1_crit
   temp1_crit_alarm
   temp1_crit_hyst
   temp1_input
   temp1_max
   temp1_max_alarm
   temp1_min
   temp1_min_alarm
   temp2_crit
   temp2_crit_alarm
   temp2_crit_hyst
   temp2_fault
   temp2_input
   temp2_max
   temp2_max_alarm
   temp2_min
   temp2_min_alarm
   temp2_offset
   temp_samples
   uevent
   update_interval

6.6 switch
----------

On the LS1028A SoC, there is a L2Switch which is connected to the host CPU
via one SoC internal MAC-to-MAC port connection between the switch and
corresponding ENETC Ethernet endpoints:

• ENETC Port 2(eth1) and switch port #4(swp3)

Following the below steps can bring up the switch ports and test ping between
two boards:

On Board1:
  ifconfig eth1 up
  ip link add name switch type bridge
  ip link set switch up
  ip link set swp0 master switch && ip link set swp0 up
  ip link set swp1 master switch && ip link set swp1 up
  ip link set swp2 master switch && ip link set swp2 up
  ip link set swp3 master switch && ip link set swp3 up
  ifconfig switch 192.168.1.2/24


On Board2:
  ifconfig eth1 up
  ip link add name switch type bridge
  ip link set switch up
  ip link set swp0 master switch && ip link set swp0 up
  ip link set swp1 master switch && ip link set swp1 up
  ip link set swp2 master switch && ip link set swp2 up
  ip link set swp3 master switch && ip link set swp3 up
  ifconfig switch 192.168.1.3/24

From Board1 ping Board2:
  # root@nxp-ls1028:~# ping 192.168.1.3
    PING 192.168.1.3 (192.168.1.3) 56(84) bytes of data.
    64 bytes from 192.168.1.3: icmp_seq=1 ttl=64 time=0.126 ms
    64 bytes from 192.168.1.3: icmp_seq=2 ttl=64 time=0.127 ms
    ^C
    --- 192.168.1.3 ping statistics ---
    2 packets transmitted, 2 received, 0% packet loss, time 1006ms
    rtt min/avg/max/mdev = 0.126/0.126/0.127/0.000 ms
    root@nxp-ls1028:~#


6.7 TSN
-------

6.7.1 Overview
--------------

Time Sensitive Network(TSN) is the IEEE802.1Q defined standard technology
to provide deterministic messaging on standard ethernet and is started
from AVB – Audio/Video Bridging. Currently, LS1028ardb enables the TSN
feature on both ENETC and switch.

For TSN on ENETC, the following protocols have been tested:
    1. IEEE 802.1Qbv
    2. IEEE 802.1Qci(not include Source Stream Identify Entry test and FMI test)
    3. IEEE 802.1Qav

For TSN on switch, the following protocols have been tested:
    1. IEEE 802.1Qbv
    2. IEEE 802.1AS
    3. IEEE 802.1Qci

To get more details about TSN feature, please refer to instructions
mentioned in the sections

    "Time Sensitive Networking (TSN)"

in the NXP's SDK user manuals.

    "Layerscape Linux Distribution POC User Guide Rev, L6.1.55_2.2.0"

6.8 PCIe
---------

The LS1028ARDB has two PCIe interfaces. They are connected to the M.2
connecter with E-Key on the LS1028ARDB Board.

Can choose the below PCIe peripheral to validate:

        Intel Corporation Wireless 7265

Can validate using the following steps:

Simply add line as follows to ${buildprj}/build/conf/local.conf:

        KERNEL_FEATURES:append = " features/iwlwifi/iwlwifi.scc"

This will include the iwlwifi and mac80211 kernel modules in
the root file system.

Built and install them:

        # bitbake wrlinux-image-xxx

Copy relevant WiFi card firmware (Intel 7265 WiFi firmware: iwlwifi-7265D-10.ucode)
to /lib/firmware of the target image.

Execute the following commands to validate the WiFi cards:

        # ifconfig wlan<idx> up
        # iw wlan<idx> scan
        # iw dev wlan<idx> connect <AP essid>
        # dhcpcd wlan<idx>
        # ping <AP address> -i wlan<idx> -c 5

6.9 FlexTimer(FTM)
------------------

The FTM is used as the wakeup source to wake up system in deep sleep 
on LS1028ardb. Please following the steps below to test it:

    1> get sleep status to check whether system support deep sleep mode 
    root@nxp-ls1028:~# cat /sys/power/mem_sleep
    s2idle [deep]

    2> set deep sleep mode when suspend to memery, it's optional
    root@nxp-ls1028:~# echo deep > /sys/power/mem_sleep

    3> wake up system in deep sleep mode afer 10 seconds
    echo 0 > /sys/class/rtc/rtc1/wakealarm; \
    echo +10>/sys/class/rtc/rtc1/wakealarm && \
    echo mem > /sys/power/state

    4> the results should be like the followings:
    PM: suspend entry (deep)
    Filesystems sync: 0.000 seconds
    Freezing user space processes ... (elapsed 0.001 seconds) done.
    OOM killer disabled.
    Freezing remaining freezable tasks ... (elapsed 0.093 seconds) done.
    printk: Suspending console(s) (use no_console_suspend to debug)
    Disabling non-boot CPUs ...
    IRQ 121: no longer affine to CPU1
    CPU1: shutdown
    psci: CPU1 killed (polled 4 ms)
    Enabling non-boot CPUs ...
    Detected PIPT I-cache on CPU1
    GICv3: CPU1: found redistributor 1 region 0:0x0000000006060000
    CPU1: Booted secondary processor 0x0000000001 [0x410fd083]
    CPU1 is up
    fsl_enetc 0000:00:00.0 eth0: Link is Down
    OOM killer enabled.
    Restarting tasks ... done.
    PM: suspend exit
    ata1: SATA link down (SStatus 0 SControl 300)
    fsl_enetc 0000:00:00.0 eth0: Link is Up - 100Mbps/Full - flow control off

6.10 DPDK
---------

Refer to the README file in dpdk feature directory(layers/wrlinux/templates/feature/dpdk).

6.11 Graphics
-------------

6.11.1 Enable Display Transmitter Controller
--------------------------------------------

6.11.1.1 Introduction
---------------------

The Display Transmitter Controller offers multiprotocol support of standards such as DisplayPort v1.3 and eDP v1.4.

6.11.1.1 Display Driver
-----------------------

The Display Transmitter Controller driver has been built when setup project with DISTRO_FEATURES including "x11 wayland".

6.11.1.2 Bootloader with display feature
----------------------------------------

To enable Display Transmitter Controller, it needs to use the rcw_1300.rcw rcw file, and set HWA_CGA_M3_CLK_SEL to 2.
And then build the ls1028 bootloader file(firmware_ls1028ardb_uboot_<boot-type>.img).

Detailed steps as below:

Refer to section 7, add necessary configurations in local.conf firstly.

Open file <project-path>/layers/nxp-ls1028/conf/machine/nxp-ls1028.conf, and then set RCW related
variable as below.
RCWSD ?= "R_SQPH_0x85be/rcw_1300"
RCWXSPI ?= "R_SQPH_0x85be/rcw_1300"
RCWEMMC ?= "R_SQPH_0x85be/rcw_1300"

Open file <project-path>/layers/meta-qoriq/recipes-bsp/secure-boot/secure-boot-qoriq/ls1028ardb.manifest,
and then set rcw related variable as below.
rcw_xspi=rcw/ls1028ardb/R_SQPH_0x85be/rcw_1300.bin
rcw_sd=rcw/ls1028ardb/R_SQPH_0x85be/rcw_1300.bin
rcw_emmc=rcw/ls1028ardb/R_SQPH_0x85be/rcw_1300.bin

# . environment-setup-x86_64-wrlinuxsdk-linux
# . oe-init-build-env
# bitbake rcw

Open file <project-path>/build/tmp-glibc/work/nxp_ls1028-wrs-linux/rcw/git-r0/git/ls1028ardb/R_SQPH_0x85be/rcw_1300.rcw,
and then set HWA_CGA_M3_CLK_SEL=2.

Rebuild rcw forcely
# bitbake rcw -c compile -f -v

Build bootloader image
# bitbake secure-boot-qoriq

After building, the bootloader image(firmware_ls1028ardb_uboot_<boot-type>.img) of supporting display
feature is generated in directory sdk-nxp-yocto-langdale/build_ls1028ardb/tmp/deploy/images/ls1028ardb.

At last, burn bootloader image with below command.

# dd if=firmware_ls1028ardb_uboot_sdboot.img of=/dev/your_sd_dev bs=512 seek=8 conv=fsync

6.11.1.3 Load DP Firmware
-------------------------

In u-boot command terminal, run below command before loading linux kernel image.

	# run sd_hdploadcmd

Note:
If users boot up board from nor flash, please run below command before loading linux kernel image.

	# run xspi_hdploadcmd

6.11.2 Enable GPU
-----------------

6.11.2.1 Introduction
---------------------

The graphics processing unit (GPU) provides high performance, high quality graphics, low power consumption, and the smallest
silicon footprint for its class. The dynamic power consumption is minimized by extensive use of multi-level hierarchical clock
gating.

6.11.2.2 GPU Driver
-------------------

The GPU driver has been built when setup project with DISTRO_FEATURES including "x11 wayland".

6.11.2.3 Limitation
-------------------

GPU driver does not support SMMU feature. When SMMU is enabled, GPU will not work.
To disable SMMU, add the following to bootargs:
iommu.passthrough=1 arm-smmu.disable_bypass=0

6.11.2.4 Verify GPU Accelerator
-------------------------------

When the system with graphics boots up, run below command to verify whether GPU works fine.

	# es2gears_wayland
	GL_VERSION = 1.5
	vertex shader info:
	fragment shader info:
	info:
	600 frames in 5.0 seconds = 119.713 FPS
	598 frames in 5.0 seconds = 119.600 FPS
	598 frames in 5.0 seconds = 119.600 FPS
	596 frames in 5.0 seconds = 119.200 FPS
	596 frames in 5.0 seconds = 119.200 FPS

There are 3 gears rotating rapidly on DP monitor。

6.11.3 Build Project with Graphics Feature
------------------------------------------

Because of the license limitation, WRLinux LTS product doesn't build graphics related packages by default.
Customer needs to build graphics features manually with below steps.

	# xxx/wrlinux-x/setup.sh --machine nxp-ls1028 --distro wrlinux-graphics --dl-layers --all-layers --accept-eula=yes
	# . environment-setup-x86_64-wrlinuxsdk-linux
	# . oe-init-build-env

	Add below content in <Project-Path>/build/conf/local.conf

	BB_NO_NETWORK = '0'
	ACCEPT_FSL_EULA = "1"
	MACHINEOVERRIDES:prepend:nxp-ls1028 = "imxgpu:use-nxp-bsp:"

	IMAGE_FEATURES:append = " weston"
	IMAGE_FEATURES:remove = "x11-base x11-sato"

	IMAGE_INSTALL:append = " \
		packagegroup-fsl-tools-gpu \
		packagegroup-imx-tools-audio \
		weston-xwayland weston-init weston-examples \
		gtk+3-demo xterm \
		packagegroup-fsl-gstreamer1.0-full \
		libopencl-imx \
		imx-gpu-viv-demos \
		mesa-demos \
	"

	PREFERRED_PROVIDER_virtual/libgl  = "imx-gpu-viv"
	PREFERRED_PROVIDER_virtual/libgles1 = "imx-gpu-viv"
	PREFERRED_PROVIDER_virtual/libgles2 = "imx-gpu-viv"
	PREFERRED_PROVIDER_virtual/libgles3 = "imx-gpu-viv"
	PREFERRED_PROVIDER_virtual/egl      = "imx-gpu-viv"
	PREFERRED_PROVIDER_virtual/opencl-icd = "imx-gpu-viv"
	PREFERRED_VERSION_weston = "12.0.3.imx"
	PREFERRED_VERSION_wayland-protocols = "1.32.imx"
	PREFERRED_VERSION_libdrm = "2.4.116.imx"
	PREFERRED_VERSION_xwayland = "23.1.1.imx"

	CUSTOMER_RECIPES:freescale-layer += 'xwayland'

	CUSTOMER_RECIPES:fsl-bsp-release += 'imx-gpu-viv'
	CUSTOMER_RECIPES:fsl-bsp-release += 'imx-gpu-viv-demos'
	CUSTOMER_RECIPES:fsl-bsp-release += 'systemd-gpuconfig'
	CUSTOMER_RECIPES:fsl-bsp-release += 'libdrm'
	CUSTOMER_RECIPES:fsl-bsp-release += 'weston'
	CUSTOMER_RECIPES:fsl-bsp-release += 'wayland-protocols'

	CUSTOMER_RECIPES:fsl-sdk-release += 'imx-gpu-sdk'
	CUSTOMER_RECIPES:fsl-sdk-release += 'libxdg-shell'
	CUSTOMER_RECIPES:fsl-sdk-release += 'gputop'
	CUSTOMER_RECIPES:fsl-sdk-release += 'libgpuperfcnt'

	CUSTOMER_RECIPES:freescale-distro += 'packagegroup-fsl-tools-gpu'
	CUSTOMER_RECIPES:freescale-distro += 'packagegroup-fsl-gstreamer1.0-full'
	CUSTOMER_RECIPES:freescale-distro += 'packagegroup-fsl-gstreamer1.0'
	CUSTOMER_RECIPES:freescale-distro += 'packagegroup-imx-tools-audio'
	CUSTOMER_RECIPES:freescale-distro += 'packagegroup-fsl-gstreamer1.0-commercial'
	CUSTOMER_RECIPES:freescale-distro += 'half'
	CUSTOMER_RECIPES:freescale-distro += 'stb'
	CUSTOMER_RECIPES:freescale-distro += 'assimp'
	CUSTOMER_RECIPES:freescale-distro += 'devil'
	CUSTOMER_RECIPES:freescale-distro += 'gli'

	CUSTOMER_RECIPES:openembedded-layer += 'xterm'
	CUSTOMER_RECIPES:openembedded-layer += 'libxaw'
	CUSTOMER_RECIPES:openembedded-layer += 'googletest'
	CUSTOMER_RECIPES:openembedded-layer += 'rapidjson'
	CUSTOMER_RECIPES:openembedded-layer += 'nlohmann-json'
	CUSTOMER_RECIPES:openembedded-layer += 'glm'
	CUSTOMER_RECIPES:openembedded-layer += 'freeglut'
	CUSTOMER_RECIPES:openembedded-layer += 'ccid'
	CUSTOMER_RECIPES:openembedded-layer += 'freerdp'
	CUSTOMER_RECIPES:openembedded-layer += 'pcsc-lite'
	CUSTOMER_RECIPES:openembedded-layer += 'pugixml'

	# Some gstream plugins require "commercial" be set in LICENSE_FLAGS_WHITELIST
	# For example, gstreamer1.0-plugins-ugly-asf/gstreamer1.0-libav
	LICENSE_FLAGS_ACCEPTED:append = " commercial"

	MACHINE_HAS_VIVANTE_KERNEL_DRIVER_SUPPORT = "1"

	At late, build the wrlinux image
	# bitbake wrlinux-image-std-sato

Note: Customer needs to confirm the IP license of GPU related packages before integrating them in their own product.
	  WindRiver only offers some demos to verify GPU and Display drivers.

6.12 kexec/kdump
----------------

In order to enable kexec/kdump feature, please add below templates during creating BSP project.

     --templates feature/kexec feature/kdump

6.12.1 kexec
------------

	kexec -l  /root/Image --append="`cat /proc/cmdline`"
	kexec -e

6.12.2 kdump
------------

Add crashkernel=1024M to the kernel cmdline
   kexec -p /root/Image --append="$your-bootcmd"
   echo c > /proc/sysrq-trigger

Note:
Before booting the second kernel, add "maxcpus=1" to the boot parameter.

For more detailed info about kdump, refer to Documentation/kdump/kdump.txt
in the kernel source tree.


7. Build Bootloader
===================

Because of license limitation, the NXP ls1028 bootloader is not supported on WRLinux product.
But the necessary recipe files of building bootloader have been integrated into WRLinux product. In this way,
the customers can build bootloader for NXP ls1028 platform based on WRLinux product by themselves.
To build bootloader image for NXP ls1028 platform, it only needs to add below contents in local.conf file,
and then build WRLinux image as usual.

	BB_NO_NETWORK = '0'
	ACCEPT_FSL_EULA = "1"
	CUSTOMER_BUILD_BOOTLOADER = "1"
	CUSTOMER_RECIPES:meta-qoriq += 'secure-boot-qoriq'
	CUSTOMER_RECIPES:meta-qoriq += 'u-boot-qoriq'
	CUSTOMER_RECIPES:meta-qoriq += 'qoriq-atf'
	CUSTOMER_RECIPES:freescale-layer += 'dp-firmware-cadence'
	CUSTOMER_RECIPES:freescale-layer += 'qoriq-cst-native'
	CUSTOMER_RECIPES:freescale-layer += 'uefi'
	CUSTOMER_RECIPES:freescale-layer += 'rcw'


Note: If customers want to integrate bootloader into their own product, they MUST consult NXP and their own
      legal department.
